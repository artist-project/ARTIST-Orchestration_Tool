--/*******************************************************************************
-- * Copyright (c) 2014 Vienna University of Technology.
-- * All rights reserved. This program and the accompanying materials
-- * are made available under the terms of the Eclipse Public License v1.0
-- * which accompanies this distribution, and is available at
-- * http://www.eclipse.org/legal/epl-v10.html
-- *
-- * Contributors:
-- * Alexander Bergmayr (Vienna University of Technology) - initial API and implementation
-- * David Madner (Vienna University of Technology)
-- *
-- * Initially developed in the context of ARTIST EU project www.artist-project.eu
-- *******************************************************************************/

-- @atlcompiler emftvm
-- @nsURI UMLMM=http://www.eclipse.org/uml2/4.0.0/UML

library CommonLibrary;

helper def : GetElement(modelName:String, elementName:String) : UMLMM!Classifier =
	UMLMM!Classifier.allInstancesFrom(modelName) -> any(c|c.name = elementName)
;

helper def : GetStereotype(modelName:String, stereoName:String) : UMLMM!Stereotype =
	UMLMM!Stereotype.allInstancesFrom(modelName) -> any(s|s.name = stereoName)
;

helper def : GetProfile(profileName:String) : UMLMM!Profile =
	UMLMM!Profile.allInstancesFrom(profileName) -> first()
;

-- refSetValue should return self, but with emftvm is does return the setter return value which is OclUndefined - sick :/
helper def : CreateElementImport(modelName:String, elementName:String) : UMLMM!ElementImport =
	let instance : UMLMM!ElementImport = UMLMM!ElementImport.newInstance() in
	let tmp : OclAny = instance.refSetValue('importedElement', thisModule.GetElement(modelName, elementName)) in
	instance
;


helper context String def : toUpperFirst() : String =
	self.substring(1, 1).toUpper() + self.substring(2)
;

helper context UMLMM!Class def : isEmbeddedType() : Boolean =
	(UMLMM!Association.allInstances() -> exists(a | a.memberEnd -> exists(p | p.type = self and p.isComposite))
				or UMLMM!Class.allInstances() -> exists(c | c.ownedAttribute -> exists(p |p.type = self and p.isComposite)))
			and not (self.ownedAttribute -> exists(p | p.isID))
;

helper context UMLMM!Class def : isEntityType() : Boolean =
	not self.isEmbeddedType()
;

helper def : CreateParameter(parameterName : String, type : UMLMM!Type, direction : String, lower : Integer, isMultiValued : Boolean) : UMLMM!Parameter =
	let instance : UMLMM!Parameter = UMLMM!Parameter.newInstance() in
	let tmp1 : OclAny = instance.refSetValue('name', parameterName) in
	let tmp2 : OclAny = instance.refSetValue('type', type) in
	let tmp3 : OclAny = instance.refInvokeOperation('setDirection', Sequence{if(direction = 'return') then #return else OclUndefined endif}) in
	let tmp4 : OclAny = instance.refSetValue('lower', lower) in
	let tmp5 : OclAny = instance.refSetValue('upper', if(isMultiValued) then 0-1 else 1 endif) in
	instance
;
	
helper def : CreateTemplateClass(className : String, templateBinding : UMLMM!TemplateBinding, package : UMLMM!Package) : UMLMM!Class =
	let instance : UMLMM!Class = UMLMM!Class.newInstance() in
	let tmp1 : OclAny = instance.refSetValue('name', className) in
	let tmp2 : OclAny = instance.refSetValue('templateBinding', Sequence{templateBinding}) in
	let tmp3 : OclAny = instance.refSetValue('package', package) in
	if UMLMM!Class.allInstancesFrom('UML_UTIL') -> exists(c|c.name = className) then
		UMLMM!Class.allInstancesFrom('UML_UTIL') -> any(c|c.name = className)
	else
		instance
	endif
;

helper def : CreateTemplateBinding(siganturePackageName : String, signatureClassName : String, substition : UMLMM!TemplateParameterSubstitution) : UMLMM!TemplateBinding =
	let instance : UMLMM!Parameter = UMLMM!TemplateBinding.newInstance() in
	let tmp1 : OclAny = instance.refSetValue('signature', thisModule.GetElement(siganturePackageName, signatureClassName).ownedTemplateSignature) in
	let tmp2 : OclAny = instance.refSetValue('parameterSubstitution', Sequence{substition}) in
	instance
;
	
helper def : CreateParameterSubstituion(actual : UMLMM!ParameterableElement, formalPackageName : String, formalClassName : String) : UMLMM!TemplateParameterSubstitution =
	let instance : UMLMM!TemplateParameterSubstitution = UMLMM!TemplateParameterSubstitution.newInstance() in
	let tmp1 : OclAny = instance.refSetValue('actual', actual) in
	let tmp2 : OclAny = instance.refSetValue('formal', thisModule.GetElement(formalPackageName, formalClassName).ownedTemplateSignature.parameter.first()) in
	instance
;