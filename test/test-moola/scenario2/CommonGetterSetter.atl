--/*******************************************************************************
-- * Copyright (c) 2014 Vienna University of Technology.
-- * All rights reserved. This program and the accompanying materials
-- * are made available under the terms of the Eclipse Public License v1.0
-- * which accompanies this distribution, and is available at
-- * http://www.eclipse.org/legal/epl-v10.html
-- *
-- * Contributors:
-- * Alexander Bergmayr (Vienna University of Technology) - initial API and implementation
-- * David Madner (Vienna University of Technology)
-- *
-- * Initially developed in the context of ARTIST EU project www.artist-project.eu
-- *******************************************************************************/

-- @atlcompiler emftvm
-- @nsURI UMLMM=http://www.eclipse.org/uml2/4.0.0/UML

module CommonGetterSetter;

create UMLM_OUT : UMLMM, UML_UTIL_OUT : UMLMM refining UMLM: UMLMM, UML_UTIL : UMLMM, JAXRS : UMLMM, Refinement : UMLMM, PrimitiveTypes : UMLMM, ExtendedTypes : UMLMM, GeneralLib : UMLMM, JacksonCore : UMLMM, JacksonDatabind : UMLMM, JavaProfile : UMLMM, javaIO : UMLMM, OBJECTIFY : UMLMM, JacksonAnnotation : UMLMM, JacksonAnnotationModel : UMLMM, objectifyTypes : UMLMM, javaUtil : UMLMM;

helper context UMLMM!Property def : getterName() : String =
	'get'.concat(self.name.toUpperFirst())
;

helper context UMLMM!Property def : setterName() : String =
	'set'.concat(self.name.toUpperFirst())
;


abstract rule AbstractAppendGetterAndSetter {
	from
		inClass : UMLMM!Class in UMLM
	to 
		outClass : UMLMM!Class (
			ownedBehavior <- inClass.ownedBehavior
				-> union(inClass.ownedAttribute -> collect(e|thisModule.resolveTemp(e, 'getterBehavior')))
				-> union(inClass.ownedAttribute -> collect(e|thisModule.resolveTemp(e, 'setterBehavior')))
				
			, ownedOperation <- inClass.ownedBehavior
				-> union(inClass.ownedAttribute -> collect(e|thisModule.resolveTemp(e, 'getter')))
				-> union(inClass.ownedAttribute -> collect(e|thisModule.resolveTemp(e, 'setter')))
		)
}

abstract rule AbstractAppendGetterAndSetterExtended {
	from
		inClass : UMLMM!Class in UMLM
	to 
		outClass : UMLMM!Class (
			elementImport <- inClass.elementImport -> append(thisModule.CreateElementImport('javaUtil', 'ArrayList'))
			, ownedBehavior <- inClass.ownedBehavior
				-> union(inClass.ownedAttribute -> collect(e|thisModule.resolveTemp(e, 'getterBehavior')))
				-> union(inClass.ownedAttribute -> collect(e|thisModule.resolveTemp(e, 'setterBehavior')))
				-> union(inClass.ownedAttribute -> select(a|a.isMultivalued()) -> collect(a | thisModule.resolveTemp(a, 'adderBehaviour')))
				
			, ownedOperation <- inClass.ownedOperation
				-> union(inClass.ownedAttribute -> collect(e|thisModule.resolveTemp(e, 'getter')))
				-> union(inClass.ownedAttribute -> collect(e|thisModule.resolveTemp(e, 'setter')))
				-> union(inClass.ownedAttribute -> select(a|a.isMultivalued()) -> collect(a | thisModule.resolveTemp(a, 'adder')))
		)
}

abstract rule AbstractSimpleProperty {
	from
		inProp : UMLMM!Property in UMLM --(not inProp.refImmediateComposite().oclIsTypeOf(UMLMM!Association))
	using {
			type : UMLMM!Type =
				if inProp.isMultivalued() then
					thisModule.CreateTemplateClass(
						'List<'.concat(inProp.type.name).concat('>')
						, thisModule.CreateTemplateBinding(
							'javaUtil'
							, 'List'
							, thisModule.CreateParameterSubstituion(inProp.type, 'javaUtil', 'List')
						)
						-- , UMLMM!Class.allInstancesFrom('UML_UTIL').first().getModel()
						, UMLMM!Model.allInstancesFrom('UML_UTIL') -> first()
					)
				else
					inProp.type
				endif;
	}
	to 
		outProp : UMLMM!Property (
			type <- type
		)
		
		, getter : UMLMM!Operation(
			name <- inProp.getterName()
			, method <- Sequence{getterBehavior}
			, visibility <- #public
			, ownedParameter <- Sequence{
				thisModule.CreateParameter(inProp.name, type, 'return', 1, false)
			}
		)
		
		, getterBehavior: UMLMM!OpaqueBehavior(
			language <- Sequence{'JAVA'}
			, body <- Sequence{'return this.' . concat(inProp.name).concat(';')}
		)
		
		, setter : UMLMM!Operation(
			name <- inProp.setterName()
			, method <- Sequence{setterBehavior}
			, visibility <- #public
			, ownedParameter <- Sequence{
				thisModule.CreateParameter(inProp.name, type, 'in', 1, false)
			}
		)
		
		, setterBehavior : UMLMM!OpaqueBehavior(
			language <- Sequence{'JAVA'}
			, body <- Sequence{'this.' . concat(inProp.name).concat(' = ').concat(inProp.name).concat(';')}
		)
}

abstract rule AbstractSimpleClassProperty {
	from
		inProp : UMLMM!Property in UMLM
	using {
		refClass : UMLMM!Class = thisModule.CreateTemplateClass(
			'Ref<'.concat(inProp.type.name).concat('>')
			, thisModule.CreateTemplateBinding(
				'objectifyTypes'
				, 'Ref'
				, thisModule.CreateParameterSubstituion(inProp.type, 'objectifyTypes', 'Ref')
			)
			-- , UMLMM!Class.allInstancesFrom('UML_UTIL').first().getModel()
			, UMLMM!Model.allInstancesFrom('UML_UTIL') -> first()
		);
	}
	to
		outProp : UMLMM!Property(
			type <- refClass
		)
		, getter : UMLMM!Operation(
			name <- 'get'.concat(inProp.name.toUpperFirst())
			, method <- Sequence{getterBehavior}
			, visibility <- #public
			, ownedParameter <- Sequence{
				thisModule.CreateParameter(inProp.name, inProp.type, 'return', 1, false)
			}
		)
		
		, getterBehavior: UMLMM!OpaqueBehavior(
			language <- Sequence{'JAVA'}
			, body <- Sequence{'return this.' . concat(inProp.name).concat('.get();')}
		)
		
		, setter : UMLMM!Operation(
			name <- 'set'.concat(inProp.name.toUpperFirst())
			, method <- Sequence{setterBehavior}
			, visibility <- #public
			, ownedParameter <- Sequence{
				thisModule.CreateParameter(inProp.name, inProp.type, 'in', 1, false)
			}
		)
		
		, setterBehavior : UMLMM!OpaqueBehavior(
			language <- Sequence{'JAVA'}
			, body <- Sequence{'this.' . concat(inProp.name).concat(' = Ref.create(').concat(inProp.name).concat(');')}
		)
}

abstract rule AbstractMultiValuedProperty {
	from
		inProp : UMLMM!Property in UMLM (inProp.oclIsTypeOf(UMLMM!Property) and not inProp.refImmediateComposite().oclIsTypeOf(UMLMM!Association) and inProp.isMultivalued())
	using {
			
		originalType : UMLMM!Type = inProp.type;

		refClass : UMLMM!Class = thisModule.CreateTemplateClass(
			'Ref<'.concat(inProp.type.name).concat('>')
			, thisModule.CreateTemplateBinding(
				'objectifyTypes'
				, 'Ref'
				, thisModule.CreateParameterSubstituion(inProp.type, 'objectifyTypes', 'Ref')
			)
			-- , UMLMM!Class.allInstancesFrom('UML_UTIL').first().getModel()
			, UMLMM!Model.allInstancesFrom('UML_UTIL') -> first()
		);

		listRefClass : UMLMM!Class  = thisModule.CreateTemplateClass(
			'List<Ref<'.concat(inProp.type.name).concat('>>')
			, thisModule.CreateTemplateBinding(
				'javaUtil'
				, 'List'
				, thisModule.CreateParameterSubstituion(refClass, 'javaUtil', 'List')
			)
			-- , UMLMM!Class.allInstancesFrom('UML_UTIL').first().getModel()
			, UMLMM!Model.allInstancesFrom('UML_UTIL') -> first()
		);

		

		listClass : UMLMM!Class = thisModule.CreateTemplateClass(
			'List<'.concat(inProp.type.name).concat('>')
			, thisModule.CreateTemplateBinding(
				'javaUtil'
				, 'List'
				, thisModule.CreateParameterSubstituion(inProp.type, 'javaUtil', 'List')
			)
			-- , UMLMM!Class.allInstancesFrom('UML_UTIL').first().getModel()
			, UMLMM!Model.allInstancesFrom('UML_UTIL') -> first()
		);
	}
	to 
		outProp : UMLMM!Property (
			type <- listRefClass
--			, defaultValue <- defaultValue
		)
--		
--		, defaultValue : UMLMM!InstanceValue(
--			
--		)
		
--		, helperTemplateParameterSubstitution : UMLMM!TemplateParameterSubstitution(
--			actual <- refClass
--			, formal <- thisModule.GetElement('javaUtil', 'List').ownedTemplateSignature.parameter.first()
--		)
--		
--		, helperTemplateBinding : UMLMM!TemplateBinding(
--			signature <- thisModule.GetElement('javaUtil', 'List').ownedTemplateSignature
--			, parameterSubstitution <- Sequence{helperTemplateParameterSubstitution}
--		)
--		
--		, helperClass: UMLMM!Class(
--			name <- 'List<Ref<'.concat(inProp.type.name).concat('>>')
--			, templateBinding <- Sequence{helperTemplateBinding}
----			, package <- inProp.refImmediateComposite().package
--		)
		
		
--		refTemplateParameterSubstitution: UMLMM!TemplateParameterSubstitution(
--			actual <- inProp.type
--			, formal <- thisModule.GetElement('objectifyTypes', 'Ref').ownedTemplateSignature.parameter.first()
--		)
--		
--		, refTemplateBinding : UMLMM!TemplateBinding(
--			signature <- thisModule.GetElement('objectifyTypes', 'Ref').ownedTemplateSignature
--			, parameterSubstitution <- Sequence{refTemplateParameterSubstitution}
--		)
--		
--		, refClass: UMLMM!Class(
--			name <- 'Ref<'.concat(inProp.type.name).concat('>')
--			, templateBinding <- Sequence{refTemplateBinding}
----			, package <- inProp.refImmediateComposite().package
--		)
		
		, getter : UMLMM!Operation(
			name <- 'get'.concat(inProp.name.toUpperFirst())
			, method <- Sequence{getterBehavior}
			, visibility <- #public
			, ownedParameter <- Sequence{
				thisModule.CreateParameter(inProp.name, listClass, 'return', 1, false)
			}
		)
		
		, getterBehavior: UMLMM!OpaqueBehavior(
			language <- Sequence{'JAVA'}
			-- , body <- Sequence{'return this.'.concat(inProp.name).concat(';')}
		)
		
		, setter : UMLMM!Operation(
			name <- 'set'.concat(inProp.name.toUpperFirst())
			, method <- Sequence{setterBehavior}
			, ownedParameter <- Sequence{
				thisModule.CreateParameter(inProp.name, listClass, 'in', 1, false)
			}
		)
		
		, setterBehavior : UMLMM!OpaqueBehavior(
			language <- Sequence{'JAVA'}
--			, body <- Sequence{'this.' . concat(inProp.name).concat(' = ').concat(inProp.name).concat(';')}
		)
		
		, adder : UMLMM!Operation(
			name <- 'add'.concat(inProp.type.name)
			, method <- Sequence{adderBehaviour}
			, ownedParameter <- Sequence{
				thisModule.CreateParameter(inProp.type.name.toLower(), inProp.type, 'in', 1, false)
			}
		)
		
		, adderBehaviour : UMLMM!OpaqueBehavior(
			language <- Sequence{'JAVA'}
--			, body <- Sequence{
--				'if ('.concat(inProp.name).concat(' == null)')
--       				.concat(inProp.name).concat(' = new ArrayList<Ref<').concat(inProp.name).concat('>>();')
--				
--   				.concat(inProp.name).concat('.add(Ref.create(entity));')
--			}
		)
		
	do {
	
		setterBehavior.body <- Sequence{
			'this.'.concat(inProp.name).concat(' = new ArrayList<Ref<').concat(originalType.name).concat('>>();
			for (').concat(originalType.name).concat(' ').concat(originalType.name.toLower()).concat(' : ').concat(inProp.name).concat(') {
				this.').concat(inProp.name).concat('.add(Ref.create(').concat(originalType.name.toLower()).concat('));
			}')
		};
		
		adderBehaviour.body <- Sequence{
			'if ('.concat(inProp.name).concat(' == null)
   				').concat(inProp.name).concat(' = new ArrayList<Ref<').concat(originalType.name).concat('>>();
			
			').concat(inProp.name).concat('.add(Ref.create(').concat(originalType.name.toLower()).concat('));')
		};
		
		getterBehavior.body <- Sequence{
			'List<'.concat(originalType.name).concat('> ').concat(inProp.name).concat(' = new ArrayList<').concat(originalType.name).concat('>();

	        if(this.').concat(inProp.name).concat(' != null) {
	        	for (Ref<').concat(originalType.name).concat('> ').concat(originalType.name.toLower()).concat(' : this.').concat(inProp.name).concat(') {
	                ').concat(inProp.name).concat('.add(').concat(originalType.name.toLower()).concat('.get());
	            }
	        }
	        
	        return ').concat(inProp.name).concat(';')
		};
	}
}